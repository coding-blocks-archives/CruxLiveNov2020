package Nov_BitMasking;

public class Check_Bit {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
      int n=13;
      int pos=2;
      int mask = 1<<pos-1;
      if((mask&n)>0) {
    	  System.out.println(1);
      }
      else {
    	  System.out.println(0);
      }
	}

}

package Nov_BitMasking;

public class Clear_Bit {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=13;
		int pos=3;
		int mask=1<<pos-1;
		mask=~mask;
		n=n&mask;
		System.out.println(n);

	}

}

package Nov_BitMasking;

public class Count_Set_bit {
	public static void main(String[] args) {
      System.out.println(CountSetBit(13));
      System.out.println(FastCountSetBit(13));
	}
	public static int CountSetBit(int n) {
		int count=0;
		while(n!=0) {
			if((n&1)==1) {
				count++;
			}
			n>>=1;// n= n>>1
		}
		return count;
	}
	public static int FastCountSetBit(int n) {
		int count=0;
		while(n!=0) {
			count++;
			n=(n&(n-1));
		}
		return count;
	}
}

package Nov_BitMasking;

public class Magic_No {

	public static void main(String[] args) {

		// TODO Auto-generated method stub
		System.out.println(nth_Magic_number(6));

	}

	public static int nth_Magic_number(int n) {
		int ans = 0;
		int mult = 5;
		while (n != 0) {
			if ((n & 1) == 1) {
				ans += mult;
			}
			mult *= 5;
			n >>= 1;
		}
		return ans;
	}

}




package Nov_BitMasking;

public class Odd_Even {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		if(Odd(8)) {
			System.out.println("Odd");
		}
		else {
			System.out.println("even");
		}

	}

	public static boolean Odd(int n) {
		if ((n & 1) == 1) {
			return true;
		} else {
			return false;
		}
	}
}

package Nov_BitMasking;

public class Unique_No_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
      int [] arr = {2,3,3,2,5,7,5};
      System.out.println(uniquenumber1(arr));
      System.out.println(18>>3);// right shift
      System.out.println(8<<3);// left shift
      System.out.println(-9>>1);

	}
public static int uniquenumber1(int [] arr) {
	int ans=0;
	for (int i = 0; i < arr.length; i++) {
		ans=ans^arr[i];
	}
	return ans;
}
}

package Nov_BitMasking;

public class Unique_nuber_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr [] = {2,3,2,5,3,7,5,9};
		int ans = 0;
		for (int i = 0; i < arr.length; i++) {
			ans=ans^arr[i];
		}
		int mask=(ans&(~(ans-1)));
		int a=0;
		for (int i = 0; i < arr.length; i++) {
			if((mask&arr[i])>=1) {
				a=a^arr[i];
			}
		}
		System.out.println(a);
		System.out.println(ans^a);

	}

}
